(declare-sort Gat 0)
(declare-fun Hom (Gat Gat) Gat)
(declare-fun typo (Gat) Gat)
(declare-fun id (Gat) Gat)
(declare-fun Ob () Gat)
(declare-fun compose (Gat Gat) Gat)
(declare-fun otimes (Gat Gat) Gat)
(declare-fun munit () Gat)
(declare-fun braid (Gat Gat) Gat)
(declare-fun mcopy (Gat) Gat)
(declare-fun delete (Gat) Gat)
(declare-fun pair (Gat Gat) Gat)
(declare-fun proj1 (Gat Gat) Gat)
(declare-fun proj2 (Gat Gat) Gat)
(declare-fun B () Gat)
(declare-fun A () Gat)

(assert (forall ((A Gat)) (=> (and (= (typo A) Ob)) (= (typo (id A)) (Hom A A)))))
(assert (forall ((A Gat) (B Gat) (C Gat) (f Gat) (g Gat))
  (=> (and (= (typo A) Ob)
           (= (typo B) Ob)
           (= (typo C) Ob)
           (= (typo f) (Hom A B))
           (= (typo g) (Hom B C)))
      (= (typo (compose f g)) (Hom A C)))))
(assert (forall ((A Gat) (B Gat))
  (=> (and (= (typo A) Ob) (= (typo B) Ob)) (= (typo (otimes A B)) Ob))))
(assert (forall ((A Gat) (B Gat) (C Gat) (D Gat) (f Gat) (g Gat))
  (=> (and (= (typo A) Ob)
           (= (typo B) Ob)
           (= (typo C) Ob)
           (= (typo D) Ob)
           (= (typo f) (Hom A B))
           (= (typo g) (Hom C D)))
      (= (typo (otimes f g)) (Hom (otimes A C) (otimes B D))))))
(assert (= (typo munit) Ob))
(assert (forall ((A Gat) (B Gat))
  (=> (and (= (typo A) Ob) (= (typo B) Ob))
      (= (typo (braid A B)) (Hom (otimes A B) (otimes B A))))))
(assert (forall ((A Gat))
  (=> (and (= (typo A) Ob)) (= (typo (mcopy A)) (Hom A (otimes A A))))))
(assert (forall ((A Gat))
  (=> (and (= (typo A) Ob)) (= (typo (delete A)) (Hom A munit)))))
(assert (forall ((A Gat) (B Gat) (C Gat) (f Gat) (g Gat))
  (=> (and (= (typo A) Ob)
           (= (typo B) Ob)
           (= (typo C) Ob)
           (= (typo f) (Hom A B))
           (= (typo g) (Hom A C)))
      (= (typo (pair f g)) (Hom A (otimes B C))))))
(assert (forall ((A Gat) (B Gat))
  (=> (and (= (typo A) Ob) (= (typo B) Ob))
      (= (typo (proj1 A B)) (Hom (otimes A B) A)))))
(assert (forall ((A Gat) (B Gat))
  (=> (and (= (typo A) Ob) (= (typo B) Ob))
      (= (typo (proj2 A B)) (Hom (otimes A B) B)))))



(assert (forall ((A Gat) (B Gat) (C Gat))
  (=> (and (= (typo A) Ob) (= (typo B) Ob) (= (typo C) Ob))
      (= (otimes (otimes A B) C) (otimes A (otimes B C))))))
(assert (forall ((A Gat)) (=> (and (= (typo A) Ob)) (= (otimes A munit) A))))
(assert (forall ((A Gat)) (=> (and (= (typo A) Ob)) (= (otimes munit A) A))))



(assert (forall ((A Gat) (B Gat) (C Gat) (D Gat) (f Gat) (g Gat) (h Gat))
  (=> (and (= (typo A) Ob)
           (= (typo B) Ob)
           (= (typo C) Ob)
           (= (typo D) Ob)
           (= (typo f) (Hom A B))
           (= (typo g) (Hom B C))
           (= (typo h) (Hom C D)))
      (= (compose (compose f g) h) (compose f (compose g h))))))

(assert (let ((a!1 (compose (otimes (mcopy A) (mcopy B))
                    (otimes (otimes (id A) (braid A B)) (id B)))))
(let ((a!2 (compose a!1
                    (otimes (otimes (id A) (delete B))
                            (otimes (delete A) (id B))))))
  (= (typo a!2) (Hom (otimes A B) (otimes (otimes A munit) (otimes munit B)))))))
(assert (let ((a!1 (compose (otimes (mcopy A) (mcopy B))
                    (otimes (otimes (id A) (braid A B)) (id B))))
      (a!2 (Hom (otimes A B) (otimes (otimes A (otimes B A)) B))))
  (= (typo a!1) a!2)))
(assert (= (typo (otimes (mcopy A) (mcopy B)))
   (Hom (otimes A B) (otimes (otimes A A) (otimes B B)))))
(assert (= (typo (mcopy A)) (Hom A (otimes A A))))
(assert (= (typo A) Ob))
(assert (= (typo (mcopy B)) (Hom B (otimes B B))))
(assert (= (typo B) Ob))
(assert (let ((a!1 (typo (otimes (otimes (id A) (braid A B)) (id B))))
      (a!2 (Hom (otimes (otimes A (otimes A B)) B)
                (otimes (otimes A (otimes B A)) B))))
  (= a!1 a!2)))
(assert (= (typo (otimes (id A) (braid A B)))
   (Hom (otimes A (otimes A B)) (otimes A (otimes B A)))))
(assert (= (typo (id A)) (Hom A A)))
(assert (= (typo A) Ob))
(assert (= (typo (braid A B)) (Hom (otimes A B) (otimes B A))))
(assert (= (typo A) Ob))
(assert (= (typo B) Ob))
(assert (= (typo (id B)) (Hom B B)))
(assert (= (typo B) Ob))
(assert (let ((a!1 (typo (otimes (otimes (id A) (delete B)) (otimes (delete A) (id B))))))
  (= a!1
     (Hom (otimes (otimes A B) (otimes A B))
          (otimes (otimes A munit) (otimes munit B))))))
(assert (= (typo (otimes (id A) (delete B))) (Hom (otimes A B) (otimes A munit))))
(assert (= (typo (id A)) (Hom A A)))
(assert (= (typo A) Ob))
(assert (= (typo (delete B)) (Hom B munit)))
(assert (= (typo B) Ob))
(assert (= (typo (otimes (delete A) (id B))) (Hom (otimes A B) (otimes munit B))))
(assert (= (typo (delete A)) (Hom A munit)))
(assert (= (typo A) Ob))
(assert (= (typo (id B)) (Hom B B)))
(assert (= (typo B) Ob))
(assert (let ((a!1 (compose (otimes (otimes (id A) (braid A B)) (id B))
                    (otimes (otimes (id A) (delete B))
                            (otimes (delete A) (id B))))))
(let ((a!2 (typo (compose (otimes (mcopy A) (mcopy B)) a!1))))
  (= a!2 (Hom (otimes A B) (otimes (otimes A munit) (otimes munit B)))))))
(assert (= (typo (otimes (mcopy A) (mcopy B)))
   (Hom (otimes A B) (otimes (otimes A A) (otimes B B)))))
(assert (= (typo (mcopy A)) (Hom A (otimes A A))))
(assert (= (typo A) Ob))
(assert (= (typo (mcopy B)) (Hom B (otimes B B))))
(assert (= (typo B) Ob))
(assert (let ((a!1 (compose (otimes (otimes (id A) (braid A B)) (id B))
                    (otimes (otimes (id A) (delete B))
                            (otimes (delete A) (id B)))))
      (a!2 (Hom (otimes (otimes A (otimes A B)) B)
                (otimes (otimes A munit) (otimes munit B)))))
  (= (typo a!1) a!2)))
(assert (let ((a!1 (typo (otimes (otimes (id A) (braid A B)) (id B))))
      (a!2 (Hom (otimes (otimes A (otimes A B)) B)
                (otimes (otimes A (otimes B A)) B))))
  (= a!1 a!2)))
(assert (= (typo (otimes (id A) (braid A B)))
   (Hom (otimes A (otimes A B)) (otimes A (otimes B A)))))
(assert (= (typo (id A)) (Hom A A)))
(assert (= (typo A) Ob))
(assert (= (typo (braid A B)) (Hom (otimes A B) (otimes B A))))
(assert (= (typo A) Ob))
(assert (= (typo B) Ob))
(assert (= (typo (id B)) (Hom B B)))
(assert (= (typo B) Ob))
(assert (let ((a!1 (typo (otimes (otimes (id A) (delete B)) (otimes (delete A) (id B))))))
  (= a!1
     (Hom (otimes (otimes A B) (otimes A B))
          (otimes (otimes A munit) (otimes munit B))))))
(assert (= (typo (otimes (id A) (delete B))) (Hom (otimes A B) (otimes A munit))))
(assert (= (typo (id A)) (Hom A A)))
(assert (= (typo A) Ob))
(assert (= (typo (delete B)) (Hom B munit)))
(assert (= (typo B) Ob))
(assert (= (typo (otimes (delete A) (id B))) (Hom (otimes A B) (otimes munit B))))
(assert (= (typo (delete A)) (Hom A munit)))
(assert (= (typo A) Ob))
(assert (= (typo (id B)) (Hom B B)))
(assert (= (typo B) Ob))

(assert (let ((a!1 (compose (otimes (mcopy A) (mcopy B))
                    (otimes (otimes (id A) (braid A B)) (id B))))
      (a!2 (otimes (otimes (id A) (delete B)) (otimes (delete A) (id B)))))
(let ((a!3 (compose (otimes (otimes (id A) (braid A B)) (id B)) a!2)))
(let ((a!4 (= (compose a!1 a!2) (compose (otimes (mcopy A) (mcopy B)) a!3))))
  (not a!4)))))
  (check-sat)