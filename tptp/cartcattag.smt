(declare-sort Gat 0)
(declare-fun tag (Gat Gat) Gat)
(declare-fun Hom (Gat Gat) Gat)
(declare-fun compose (Gat Gat) Gat)
(declare-fun id (Gat) Gat)
(declare-fun Ob () Gat)
(declare-fun otimes (Gat Gat) Gat)
(declare-fun munit () Gat)
(declare-fun braid (Gat Gat) Gat)
(declare-fun mcopy (Gat) Gat)
(declare-fun delete (Gat) Gat)
(declare-fun pair (Gat Gat) Gat)
(declare-fun proj1 (Gat Gat) Gat)
(declare-fun proj2 (Gat Gat) Gat)
(assert (forall ((A Gat) (B Gat) (C Gat) (D Gat) (f Gat) (g Gat) (h Gat))
  (let ((a!1 (tag (compose (tag f (Hom A B)) (tag g (Hom B C))) (Hom A C)))
        (a!3 (tag (compose (tag g (Hom B C)) (tag h (Hom C D))) (Hom B D))))
  (let ((a!2 (tag (compose a!1 (tag h (Hom C D))) (Hom A D)))
        (a!4 (tag (compose (tag f (Hom A B)) a!3) (Hom A D))))
    (= a!2 a!4)))))
(assert (forall ((A Gat) (B Gat) (f Gat))
  (let ((a!1 (compose (tag f (Hom A B)) (tag (id (tag B Ob)) (Hom B B)))))
    (= (tag a!1 (Hom A B)) (tag f (Hom A B))))))
(assert (forall ((A Gat) (B Gat) (f Gat))
  (let ((a!1 (compose (tag (id (tag A Ob)) (Hom A A)) (tag f (Hom A B)))))
    (= (tag a!1 (Hom A B)) (tag f (Hom A B))))))
(assert (forall ((A Gat) (B Gat) (C Gat))
  (let ((a!1 (otimes (tag (otimes (tag A Ob) (tag B Ob)) Ob) (tag C Ob)))
        (a!2 (otimes (tag A Ob) (tag (otimes (tag B Ob) (tag C Ob)) Ob))))
    (= (tag a!1 Ob) (tag a!2 Ob)))))
(assert (forall ((A Gat)) (= (tag (otimes (tag A Ob) (tag munit Ob)) Ob) (tag A Ob))))
(assert (forall ((A Gat)) (= (tag (otimes (tag munit Ob) (tag A Ob)) Ob) (tag A Ob))))
(assert (forall ((A Gat)
         (B Gat)
         (C Gat)
         (X Gat)
         (Y Gat)
         (Z Gat)
         (f Gat)
         (g Gat)
         (h Gat))
  (let ((a!1 (tag (otimes (tag f (Hom A X)) (tag g (Hom B Y)))
                  (Hom (otimes A B) (otimes X Y))))
        (a!3 (tag (otimes (tag g (Hom B Y)) (tag h (Hom C Z)))
                  (Hom (otimes B C) (otimes Y Z)))))
  (let ((a!2 (tag (otimes a!1 (tag h (Hom C Z)))
                  (Hom (otimes (otimes A B) C) (otimes (otimes X Y) Z))))
        (a!4 (tag (otimes (tag f (Hom A X)) a!3)
                  (Hom (otimes A (otimes B C)) (otimes X (otimes Y Z))))))
    (= a!2 a!4)))))
(assert (forall ((A Gat)
         (B Gat)
         (C Gat)
         (X Gat)
         (Y Gat)
         (Z Gat)
         (f Gat)
         (h Gat)
         (g Gat)
         (k Gat))
  (let ((a!1 (tag (otimes (tag f (Hom A B)) (tag g (Hom X Y)))
                  (Hom (otimes A X) (otimes B Y))))
        (a!2 (tag (otimes (tag h (Hom B C)) (tag k (Hom Y Z)))
                  (Hom (otimes B Y) (otimes C Z))))
        (a!3 (tag (compose (tag f (Hom A B)) (tag h (Hom B C))) (Hom A C)))
        (a!4 (tag (compose (tag g (Hom X Y)) (tag k (Hom Y Z))) (Hom X Z))))
    (= (tag (compose a!1 a!2) (Hom (otimes A X) (otimes C Z)))
       (tag (otimes a!3 a!4) (Hom (otimes A X) (otimes C Z)))))))
(assert (forall ((A Gat) (B Gat))
  (let ((a!1 (id (tag (otimes (tag A Ob) (tag B Ob)) Ob)))
        (a!2 (otimes (tag (id (tag A Ob)) (Hom A A))
                     (tag (id (tag B Ob)) (Hom B B)))))
    (= (tag a!1 (Hom (otimes A B) (otimes A B)))
       (tag a!2 (Hom (otimes A B) (otimes A B)))))))
(assert (forall ((A Gat) (B Gat))
  (let ((a!1 (compose (tag (braid (tag A Ob) (tag B Ob))
                           (Hom (otimes A B) (otimes B A)))
                      (tag (braid (tag B Ob) (tag A Ob))
                           (Hom (otimes B A) (otimes A B)))))
        (a!2 (id (tag (otimes (tag A Ob) (tag B Ob)) Ob))))
    (= (tag a!1 (Hom (otimes A B) (otimes A B)))
       (tag a!2 (Hom (otimes A B) (otimes A B)))))))
(assert (forall ((A Gat) (B Gat) (C Gat))
  (let ((a!1 (braid (tag A Ob) (tag (otimes (tag B Ob) (tag C Ob)) Ob)))
        (a!3 (otimes (tag (braid (tag A Ob) (tag B Ob))
                          (Hom (otimes A B) (otimes B A)))
                     (tag (id (tag C Ob)) (Hom C C))))
        (a!5 (otimes (tag (id (tag B Ob)) (Hom B B))
                     (tag (braid (tag A Ob) (tag C Ob))
                          (Hom (otimes A C) (otimes C A))))))
  (let ((a!2 (tag a!1 (Hom (otimes A (otimes B C)) (otimes (otimes B C) A))))
        (a!4 (tag a!3 (Hom (otimes (otimes A B) C) (otimes (otimes B A) C))))
        (a!6 (tag a!5 (Hom (otimes B (otimes A C)) (otimes B (otimes C A))))))
  (let ((a!7 (tag (compose a!4 a!6)
                  (Hom (otimes (otimes A B) C) (otimes B (otimes C A))))))
    (= a!2 a!7))))))
(assert (forall ((A Gat) (B Gat) (C Gat))
  (let ((a!1 (braid (tag (otimes (tag A Ob) (tag B Ob)) Ob) (tag C Ob)))
        (a!3 (otimes (tag (id (tag A Ob)) (Hom A A))
                     (tag (braid (tag B Ob) (tag C Ob))
                          (Hom (otimes B C) (otimes C B)))))
        (a!5 (otimes (tag (braid (tag A Ob) (tag C Ob))
                          (Hom (otimes A C) (otimes C A)))
                     (tag (id (tag B Ob)) (Hom B B)))))
  (let ((a!2 (tag a!1 (Hom (otimes (otimes A B) C) (otimes C (otimes A B)))))
        (a!4 (tag a!3 (Hom (otimes A (otimes B C)) (otimes A (otimes C B)))))
        (a!6 (tag a!5 (Hom (otimes (otimes A C) B) (otimes (otimes C A) B)))))
  (let ((a!7 (tag (compose a!4 a!6)
                  (Hom (otimes A (otimes B C)) (otimes (otimes C A) B)))))
    (= a!2 a!7))))))
(assert (forall ((A Gat) (B Gat) (C Gat) (D Gat) (f Gat) (g Gat))
  (let ((a!1 (tag (otimes (tag f (Hom A B)) (tag g (Hom C D)))
                  (Hom (otimes A C) (otimes B D))))
        (a!3 (tag (otimes (tag g (Hom C D)) (tag f (Hom A B)))
                  (Hom (otimes C A) (otimes D B)))))
  (let ((a!2 (compose a!1
                      (tag (braid (tag B Ob) (tag D Ob))
                           (Hom (otimes B D) (otimes D B)))))
        (a!4 (compose (tag (braid (tag A Ob) (tag C Ob))
                           (Hom (otimes A C) (otimes C A)))
                      a!3)))
    (= (tag a!2 (Hom (otimes A C) (otimes D B)))
       (tag a!4 (Hom (otimes A C) (otimes D B))))))))
(assert (forall ((A Gat))
  (let ((a!1 (tag (mcopy (tag A Ob)) (Hom A (otimes A A)))))
  (let ((a!2 (otimes a!1 (tag (id (tag A Ob)) (Hom A A))))
        (a!5 (otimes (tag (id (tag A Ob)) (Hom A A)) a!1)))
  (let ((a!3 (tag a!2 (Hom (otimes A A) (otimes (otimes A A) A))))
        (a!6 (tag a!5 (Hom (otimes A A) (otimes A (otimes A A))))))
  (let ((a!4 (tag (compose a!1 a!3) (Hom A (otimes (otimes A A) A))))
        (a!7 (tag (compose a!1 a!6) (Hom A (otimes A (otimes A A))))))
    (= a!4 a!7)))))))
(assert (forall ((A Gat))
  (let ((a!1 (otimes (tag (delete (tag A Ob)) (Hom A munit))
                     (tag (id (tag A Ob)) (Hom A A)))))
  (let ((a!2 (compose (tag (mcopy (tag A Ob)) (Hom A (otimes A A)))
                      (tag a!1 (Hom (otimes A A) (otimes munit A))))))
    (= (tag a!2 (Hom A (otimes munit A))) (tag (id (tag A Ob)) (Hom A A)))))))
(assert (forall ((A Gat))
  (let ((a!1 (otimes (tag (id (tag A Ob)) (Hom A A))
                     (tag (delete (tag A Ob)) (Hom A munit)))))
  (let ((a!2 (compose (tag (mcopy (tag A Ob)) (Hom A (otimes A A)))
                      (tag a!1 (Hom (otimes A A) (otimes A munit))))))
    (= (tag a!2 (Hom A (otimes A munit))) (tag (id (tag A Ob)) (Hom A A)))))))
(assert (forall ((A Gat))
  (let ((a!1 (tag (mcopy (tag A Ob)) (Hom A (otimes A A)))))
  (let ((a!2 (compose a!1
                      (tag (braid (tag A Ob) (tag A Ob))
                           (Hom (otimes A A) (otimes A A))))))
    (= (tag a!2 (Hom A (otimes A A))) a!1)))))
(assert (forall ((A Gat) (B Gat))
  (let ((a!1 (mcopy (tag (otimes (tag A Ob) (tag B Ob)) Ob)))
        (a!3 (otimes (tag (mcopy (tag A Ob)) (Hom A (otimes A A)))
                     (tag (mcopy (tag B Ob)) (Hom B (otimes B B)))))
        (a!5 (otimes (tag (id (tag A Ob)) (Hom A A))
                     (tag (braid (tag A Ob) (tag B Ob))
                          (Hom (otimes A B) (otimes B A)))))
        (a!8 (Hom (otimes (otimes A (otimes A B)) B)
                  (otimes (otimes A (otimes B A)) B)))
        (a!9 (Hom (otimes A B) (otimes (otimes A (otimes B A)) B))))
  (let ((a!2 (tag a!1 (Hom (otimes A B) (otimes (otimes A B) (otimes A B)))))
        (a!4 (tag a!3 (Hom (otimes A B) (otimes (otimes A A) (otimes B B)))))
        (a!6 (tag a!5 (Hom (otimes A (otimes A B)) (otimes A (otimes B A))))))
  (let ((a!7 (otimes a!6 (tag (id (tag B Ob)) (Hom B B)))))
    (= a!2 (tag (compose a!4 (tag a!7 a!8)) a!9)))))))
(assert (forall ((A Gat) (B Gat))
  (let ((a!1 (delete (tag (otimes (tag A Ob) (tag B Ob)) Ob)))
        (a!2 (otimes (tag (delete (tag A Ob)) (Hom A munit))
                     (tag (delete (tag B Ob)) (Hom B munit)))))
    (= (tag a!1 (Hom (otimes A B) munit))
       (tag a!2 (Hom (otimes A B) (otimes munit munit)))))))
(assert (= (tag (mcopy (tag munit Ob)) (Hom munit (otimes munit munit)))
   (tag (id (tag munit Ob)) (Hom munit munit))))
(assert (= (tag (delete (tag munit Ob)) (Hom munit munit))
   (tag (id (tag munit Ob)) (Hom munit munit))))
(assert (forall ((A Gat) (B Gat) (C Gat) (f Gat) (g Gat))
  (let ((a!1 (tag (pair (tag f (Hom C A)) (tag g (Hom C B)))
                  (Hom C (otimes A B))))
        (a!2 (tag (otimes (tag f (Hom C A)) (tag g (Hom C B)))
                  (Hom (otimes C C) (otimes A B)))))
  (let ((a!3 (compose (tag (mcopy (tag C Ob)) (Hom C (otimes C C))) a!2)))
    (= a!1 (tag a!3 (Hom C (otimes A B))))))))
(assert (forall ((A Gat) (B Gat))
  (let ((a!1 (otimes (tag (id (tag A Ob)) (Hom A A))
                     (tag (delete (tag B Ob)) (Hom B munit)))))
    (= (tag (proj1 (tag A Ob) (tag B Ob)) (Hom (otimes A B) A))
       (tag a!1 (Hom (otimes A B) (otimes A munit)))))))
(assert (forall ((A Gat) (B Gat))
  (let ((a!1 (otimes (tag (delete (tag A Ob)) (Hom A munit))
                     (tag (id (tag B Ob)) (Hom B B)))))
    (= (tag (proj2 (tag A Ob) (tag B Ob)) (Hom (otimes A B) B))
       (tag a!1 (Hom (otimes A B) (otimes munit B)))))))
(assert (forall ((A Gat) (B Gat) (f Gat))
  (let ((a!1 (compose (tag f (Hom A B))
                      (tag (mcopy (tag B Ob)) (Hom B (otimes B B)))))
        (a!2 (tag (otimes (tag f (Hom A B)) (tag f (Hom A B)))
                  (Hom (otimes A A) (otimes B B)))))
  (let ((a!3 (compose (tag (mcopy (tag A Ob)) (Hom A (otimes A A))) a!2)))
    (= (tag a!1 (Hom A (otimes B B))) (tag a!3 (Hom A (otimes B B))))))))
(assert (forall ((A Gat) (B Gat) (f Gat))
  (let ((a!1 (compose (tag f (Hom A B)) (tag (delete (tag B Ob)) (Hom B munit)))))
    (= (tag a!1 (Hom A munit)) (tag (delete (tag A Ob)) (Hom A munit))))))
(assert (let ((a!1 (= (tag (braid (tag munit Ob) (tag munit Ob))
                   (Hom (otimes munit munit) (otimes munit munit)))
              (tag (id (tag munit Ob)) (Hom munit munit)))))
  (not a!1)))

  (check-sat)